// $Id: ClReader.cup,v 1.1 2008/08/12 22:32:43 larrymelia Exp $
// ClReader.cup
// (C) 1999 Will Portnoy and Greg J. Badros
// Needs JavaCup package
// http://www.cs.princeton.edu/~appel/modern/java/CUP/
// See the README file for details.

package EDU.Washington.grad.gjb.cassowary;

import java_cup.runtime.*;

parser code
{:
	public java.util.Hashtable m_variable_name_object_hash;
	public boolean m_debug_parse = false;

	public void setVariableNameObjectHash(java.util.Hashtable variable_name_object_hash) {
		m_variable_name_object_hash = variable_name_object_hash;
	}
:}

terminal GEQ, LEQ, EQ, PLUS, MINUS, UMINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Double NUMBER;
terminal String VARIABLE;

non terminal constraint, equation, inequality, expr;

precedence left TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence left UMINUS;

constraint	::=	  equation:a 			{: RESULT = a; :}
			| inequality:a				{: RESULT = a; :}
	;

equation	::=	  expr:a EQ expr:b		{: RESULT = (new ClLinearEquation	((ClLinearExpression) a, (ClLinearExpression) b)); :}
	;

inequality	::=	  expr:a GEQ expr:b		{: RESULT = (new ClLinearInequality	((ClLinearExpression) a, CL.Op.GEQ, (ClLinearExpression) b)); :}
			| expr:a LEQ expr:b			{: RESULT = (new ClLinearInequality	((ClLinearExpression) a, CL.Op.LEQ, (ClLinearExpression) b)); :}
	;

expr		::=	  NUMBER:a				{: RESULT = (new ClLinearExpression(a.doubleValue())); :}
			| VARIABLE:a				{:

	// look up variable first
	if (parser.m_debug_parse) {
		System.out.println("Grammar found variable: <" + a + ">");
	}

	if (parser.m_variable_name_object_hash == null) {
		System.err.println("	Don't have hash.");
	}

	if (parser.m_debug_parse) {
		if (! parser.m_variable_name_object_hash.containsKey(a)) {
			System.out.println("	Unrecognized variable parsed: <" + a + ">");
		} else {
			System.out.println("	Found variable: <" + a + "> in hash.");
		}
	}

	ClVariable variable_object = (ClVariable) parser.m_variable_name_object_hash.get(a);

	if (variable_object == null) {
		System.err.println("	Could not get hashed variable.");
	}
	
	RESULT = (new ClLinearExpression(variable_object));
										:}

			| expr:a PLUS expr:b		{: RESULT = (CL.Plus	((ClLinearExpression) a, (ClLinearExpression) b)); :}
			| expr:a MINUS expr:b		{: RESULT = (CL.Minus	((ClLinearExpression) a, (ClLinearExpression) b)); :}
			| expr:a TIMES expr:b		{: RESULT = (CL.Times	((ClLinearExpression) a, (ClLinearExpression) b)); :}
			| expr:a DIVIDE expr:b		{: RESULT = (CL.Divide	((ClLinearExpression) a, (ClLinearExpression) b)); :}
			| MINUS expr:a				{: RESULT = (CL.Times	(-1, (ClLinearExpression) a)); :}
			%prec UMINUS
			| LPAREN expr:a RPAREN		{: RESULT = a; :}
	;

// Local Variables:
// tab-width: 4
