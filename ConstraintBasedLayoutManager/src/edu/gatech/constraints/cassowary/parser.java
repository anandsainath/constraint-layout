//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 14 17:07:03 GMT-10:00 2007
//----------------------------------------------------

package edu.gatech.constraints.cassowary;

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Sat Jul 14 17:07:03 GMT-10:00 2007
 */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\016\000\002\002\003\000\002\002\004\000\002\002"
            + "\003\000\002\003\005\000\002\004\005\000\002\004\005"
            + "\000\002\005\003\000\002\005\003\000\002\005\005\000"
            + "\002\005\005\000\002\005\005\000\002\005\005\000\002"
            + "\005\004\000\002\005\005" });

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\033\000\012\010\007\014\011\016\005\017\013\001"
            + "\002\000\004\002\001\001\002\000\024\002\ufffb\004\ufffb"
            + "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\015"
            + "\ufffb\001\002\000\004\002\uffff\001\002\000\012\010\007"
            + "\014\011\016\005\017\013\001\002\000\004\002\034\001"
            + "\002\000\012\010\007\014\011\016\005\017\013\001\002"
            + "\000\020\004\015\005\017\006\014\007\016\010\020\012"
            + "\022\013\021\001\002\000\024\002\ufffa\004\ufffa\005\ufffa"
            + "\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\015\ufffa\001"
            + "\002\000\012\010\007\014\011\016\005\017\013\001\002"
            + "\000\012\010\007\014\011\016\005\017\013\001\002\000"
            + "\012\010\007\014\011\016\005\017\013\001\002\000\012"
            + "\010\007\014\011\016\005\017\013\001\002\000\012\010"
            + "\007\014\011\016\005\017\013\001\002\000\012\010\007"
            + "\014\011\016\005\017\013\001\002\000\012\010\007\014"
            + "\011\016\005\017\013\001\002\000\024\002\ufff7\004\ufff7"
            + "\005\ufff7\006\ufff7\007\016\010\020\012\ufff7\013\ufff7\015"
            + "\ufff7\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6"
            + "\007\016\010\020\012\ufff6\013\ufff6\015\ufff6\001\002\000"
            + "\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8"
            + "\012\ufff8\013\ufff8\015\ufff8\001\002\000\014\002\ufffc\007"
            + "\016\010\020\012\022\013\021\001\002\000\024\002\ufff9"
            + "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013"
            + "\ufff9\015\ufff9\001\002\000\014\002\ufffd\007\016\010\020"
            + "\012\022\013\021\001\002\000\014\002\ufffe\007\016\010"
            + "\020\012\022\013\021\001\002\000\014\007\016\010\020"
            + "\012\022\013\021\015\033\001\002\000\024\002\ufff4\004"
            + "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4"
            + "\015\ufff4\001\002\000\004\002\000\001\002\000\024\002"
            + "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5"
            + "\013\ufff5\015\ufff5\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\033\000\012\002\007\003\003\004\005\005\011\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\004\005\034\001\001\000\002\001\001\000\004\005"
            + "\031\001\001\000\002\001\001\000\002\001\001\000\004"
            + "\005\030\001\001\000\004\005\027\001\001\000\004\005"
            + "\026\001\001\000\004\005\025\001\001\000\004\005\024"
            + "\001\001\000\004\005\023\001\001\000\004\005\022\001"
            + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
            + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
            + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
            + "\001\001\000\002\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(int act_num,
            java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public java.util.Hashtable m_variable_name_object_hash;
    public boolean m_debug_parse = false;

    public void setVariableNameObjectHash(
            java.util.Hashtable variable_name_object_hash) {
        m_variable_name_object_hash = variable_name_object_hash;
    }

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack, int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /* . . . . . . . . . . . . . . . . . . . . */
        case 13: // expr ::= LPAREN expr RPAREN
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            RESULT = a;
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 12: // expr ::= MINUS expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (CL.Times(-1, (ClLinearExpression) a));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 11: // expr ::= expr DIVIDE expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (CL.Divide((ClLinearExpression) a, (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 10: // expr ::= expr TIMES expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (CL.Times((ClLinearExpression) a, (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 9: // expr ::= expr MINUS expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (CL.Minus((ClLinearExpression) a, (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 8: // expr ::= expr PLUS expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (CL.Plus((ClLinearExpression) a, (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 7: // expr ::= VARIABLE
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;

            // look up variable first
            if (parser.m_debug_parse) {
                System.out.println("Grammar found variable: <" + a + ">");
            }

            if (parser.m_variable_name_object_hash == null) {
                System.err.println("	Don't have hash.");
            }

            if (parser.m_debug_parse) {
                if (!parser.m_variable_name_object_hash.containsKey(a)) {
                    System.out.println("	Unrecognized variable parsed: <" + a
                            + ">");
                } else {
                    System.out.println("	Found variable: <" + a + "> in hash.");
                }
            }

            ClVariable variable_object = (ClVariable) parser.m_variable_name_object_hash
                    .get(a);

            if (variable_object == null) {
                System.err.println("	Could not get hashed variable.");
            }

            RESULT = (new ClLinearExpression(variable_object));

            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 6: // expr ::= NUMBER
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Double a = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (new ClLinearExpression(a.doubleValue()));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "expr",
                            3,
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 5: // inequality ::= expr LEQ expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (new ClLinearInequality((ClLinearExpression) a, CL.Op.LEQ,
                    (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "inequality",
                            2,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 4: // inequality ::= expr GEQ expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (new ClLinearInequality((ClLinearExpression) a, CL.Op.GEQ,
                    (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "inequality",
                            2,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 3: // equation ::= expr EQ expr
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 2)).value;
            int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = (new ClLinearEquation((ClLinearExpression) a,
                    (ClLinearExpression) b));
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "equation",
                            1,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 2)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 2: // constraint ::= inequality
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = a;
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "constraint",
                            0,
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 1: // $START ::= constraint EOF
        {
            Object RESULT = null;
            int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).left;
            int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).right;
            Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .elementAt(CUP$parser$top - 1)).value;
            RESULT = start_val;
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "$START",
                            0,
                            ((java_cup.runtime.Symbol) CUP$parser$stack
                                    .elementAt(CUP$parser$top - 1)),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
        case 0: // constraint ::= equation
        {
            Object RESULT = null;
            int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
                    .peek()).value;
            RESULT = a;
            CUP$parser$result = parser
                    .getSymbolFactory()
                    .newSymbol(
                            "constraint",
                            0,
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            ((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
                            RESULT);
        }
            return CUP$parser$result;

            /* . . . . . . */
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");

        }
    }
}
